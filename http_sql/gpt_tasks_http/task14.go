/*
‚úÖ –ó–∞–¥–∞—á–∞ 14 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ query‚Äë–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
–£—Å–ª–æ–≤–∏–µ:
–î–æ–±–∞–≤—å –≤ —Å–µ—Ä–≤–µ—Ä –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç /greet, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç GET‚Äë–∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º name, –Ω–∞–ø—Ä–∏–º–µ—Ä:

GET /greet?name=Alice
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:

Hello, Alice!
–ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:

Hello, stranger!

üìå –ü–æ–¥—Å–∫–∞–∑–∫–∞:

–ü—Ä–æ–≤–µ—Ä—å –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ r.Method == http.MethodGet.

–î–æ—Å—Ç–∞–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä —á–µ—Ä–µ–∑ r.URL.Query().Get("name").

–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å "stranger".

–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type: text/plain.

–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ fmt.Fprintln(w, ...).
*/
package gpt_tasks_http

import (
	"fmt"
	"net/http"
)

func greetHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")

	name := r.URL.Query().Get("name")
	if name == "" {
		name = "stranger"
	}

	fmt.Fprintf(w, "Hello, %s\n", name)
}

func Task14() {
	http.HandleFunc("/greet", greetHandler)

	http.ListenAndServe(":8080", nil)
}
