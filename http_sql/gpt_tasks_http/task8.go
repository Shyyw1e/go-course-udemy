/*
‚úÖ –ó–∞–¥–∞—á–∞ 8 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
–£—Å–ª–æ–≤–∏–µ:
–†–µ–∞–ª–∏–∑—É–π —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—É—Ç—å:

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
/hello/{name}
–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ /hello/Alex, —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å:

–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
Hello, Alex!
üîß –ü–æ–¥—Å–∫–∞–∑–∫–∞:
–í net/http –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø–æ—ç—Ç–æ–º—É —Ç—ã –º–æ–∂–µ—à—å:

–ª–∏–±–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å r.URL.Path –≤—Ä—É—á–Ω—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ strings.Split(...)

–ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, chi, gorilla/mux) ‚Äî –Ω–æ —Å–µ–π—á–∞—Å –º—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è –Ω–∞ —á–∏—Å—Ç–æ–º net/http

üí° –ü–ª–∞–Ω:
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ http.HandleFunc("/hello/", handler)

–ò–∑ r.URL.Path –≤—ã—Ä–µ–∑–∞–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ /hello/)

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
*/

package gpt_tasks_http

import (
	"fmt"
	"net/http"
	"strings"
)

func nameHandler(w http.ResponseWriter, r *http.Request) {
	urla := strings.Split(r.URL.Path, "/")
	name := urla[len(urla) - 1]
	
	fmt.Fprintf(w, "Hello, %s!", name)
}

func Task8() {
	http.HandleFunc("/hello/", nameHandler)

	fmt.Println("Server listening at :8080")
	http.ListenAndServe(":8080", nil)
}