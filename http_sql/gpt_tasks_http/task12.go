/*
‚úÖ –ó–∞–¥–∞—á–∞ 12 ‚Äî Cookie –∏ —Å–µ—Å—Å–∏—è
–£—Å–ª–æ–≤–∏–µ:

–°–æ–∑–¥–∞–π —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π:

–ü—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ –ø–æ –ø—É—Ç–∏ /login —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cookie —Å –∏–º–µ–Ω–µ–º session_id –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º abc123.

–ü—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ –ø–æ –ø—É—Ç–∏ /dashboard –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ cookie session_id.
–ï—Å–ª–∏ cookie –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 Unauthorized —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "Please login first".
–ï—Å–ª–∏ cookie –µ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 OK —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "Welcome to the dashboard".

üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏:

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookie:

go
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
http.SetCookie(w, &http.Cookie{
    Name:  "session_id",
    Value: "abc123",
    Path:  "/",
})
–ü–æ–ª—É—á–µ–Ω–∏–µ cookie:

go
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
cookie, err := r.Cookie("session_id")
–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ errors.Is(err, http.ErrNoCookie).


*/

package gpt_tasks_http

import (
	"errors"
	"fmt"
	"net/http"
)

func cookieHandler(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
	case "/login":
		http.SetCookie(w, &http.Cookie{
			Name: "session_id",
			Value: "abc123",
			Path: "/",
		})
		fmt.Fprintln(w, "Logged in")
	case "/dashboard":
		cookie, err := r.Cookie("session_id")
		if err != nil || errors.Is(err, http.ErrNoCookie) {
			http.Error(w, "Please login first", http.StatusUnauthorized)
			return
		}
		if cookie.Value != "abc123" {
			http.Error(w, "Invalid Session", http.StatusUnauthorized)
			return
		}
		fmt.Fprintln(w, "Welcome to dashboard")
	default:
		http.NotFound(w, r)
	}
}


func Task12() {
	http.HandleFunc("/", cookieHandler)

	http.ListenAndServe(":8080", nil)
}