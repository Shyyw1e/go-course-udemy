/*
9. HTTP-—Å–µ—Ä–≤–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–æ–º –∏ JSON-–æ—Ç–≤–µ—Ç–æ–º
–£—Å–ª–æ–≤–∏–µ:
–°–æ–∑–¥–∞–π —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ GET-–∑–∞–ø—Ä–æ—Å /status –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –ø–æ–ª–µ "time" –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "ok" –≤ –ø–æ–ª–µ "status".

üìå –ü–æ–¥—Å–∫–∞–∑–∫–∞:

–ò—Å–ø–æ–ª—å–∑—É–π json.NewEncoder(w).Encode(...)

–ù–µ –∑–∞–±—É–¥—å –∑–∞–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type: application/json
*/

package gpt_tasks_http

import (
	"encoding/json"
	"net/http"
	"time"
)

type jsonOk struct {
	Time time.Time `json:"time"`
	Status string `json:"status"`
}

func jsonOkHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed: ", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	v := jsonOk{
	Status : "ok",
	Time : time.Now(),
	}
	
	err := json.NewEncoder(w).Encode(v)
	if err != nil {
		http.Error(w, "Failed to encode json: ", http.StatusBadRequest)
	}
	
}


func Task9() {
	http.HandleFunc("/status", jsonOkHandler)

	http.ListenAndServe(":8080", nil)
}