/*
–£—Å–ª–æ–≤–∏–µ:

–°–¥–µ–ª–∞–π GET-–∑–∞–ø—Ä–æ—Å –Ω–∞:

arduino
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
https://httpbin.org/json
–†–∞—Å–ø–∞—Ä—Å–∏ JSON-–æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—ã–≤–µ–¥–∏ title –∏–∑ –ø–æ–ª—è slideshow.

üîé –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:
json
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å

	{
	  "slideshow": {
	    "author": "Yours Truly",
	    "date": "date of publication",
	    "title": "Sample Slide Show",
	    "slides": [...]
	  }
	}

üîß –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:
–°–¥–µ–ª–∞—Ç—å GET-–∑–∞–ø—Ä–æ—Å

–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (io.ReadAll)

# –û–±—ä—è–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º slideshow.title

# –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å –ø–æ–º–æ—â—å—é json.Unmarshal

–í—ã–≤–µ—Å—Ç–∏ slideshow.title
*/
package gpt_tasks_http

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

type Response struct {
	Slideshow struct {
		Author string `json:"author"`
		Date string `json:"date"`
		Title string `json:"title"`
	}`json:"slideshow"`
}

func Task6() {
	resp, err := http.Get("https://httpbin.org/json")
	if err != nil {
		fmt.Printf("invalid request: %s", err)
		return
	} 
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("failed to read response: %s", err)
	}
	var respjson Response
	json.Unmarshal(body, &respjson)
	fmt.Printf("Slideshow title: %s", respjson.Slideshow.Title)
}

